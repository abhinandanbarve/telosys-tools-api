##----------------------------------------------------------------------------------------------------
## JPA beans suffix
#set ( $env.entityClassNameSuffix = "Entity" )
##--------------------------------------------------------------------------------------------------------
## Data fields = fields not in Primary Key and not in selected Links    
#set( $dataFields = $entity.getAttributesByCriteria( $const.NOT_KEY, $const.NOT_IN_SELECTED_LINKS ) )
##--------------------------------------------------------------------------------------------------------
## Link fields = fields not in Primary Key and used as FK in selected Links    
#set( $linkFields = $entity.getAttributesByCriteria( $const.NOT_KEY, $const.IN_SELECTED_LINKS ) )
##--------------------------------------------------------------------------------------------------------
#set( $allMappedFields = $fn.concatLists($entity.keyAttributes, $dataFields) )
##--------------------------------------------------------------------------------------------------------
/*
 * Created on $today.date ( Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */

//--------------------------------------------------------------------
entity.name = "$entity.name"
entity.fullName = "$entity.fullName"

attributesCount = $entity.attributesCount
attributes.size() = $entity.attributes.size()
entity.hasTextAttribute() = $entity.hasTextAttribute() 

//--- Database 
entity.databaseType    = "$entity.databaseType"
entity.databaseTable   = "$entity.databaseTable"
entity.databaseCatalog = "$entity.databaseCatalog"
entity.databaseSchema  = "$entity.databaseSchema"
entity.databaseForeignKeysCount = $entity.databaseForeignKeysCount 
entity.databaseForeignKeys.size() = $entity.databaseForeignKeys.size()

entity.hasPrimaryKey()            = $entity.hasPrimaryKey() 
entity.hasCompositePrimaryKey()   = $entity.hasCompositePrimaryKey()

hasAutoIncrementedKey() = $entity.hasAutoIncrementedKey()
#if ( $entity.hasAutoIncrementedKey() ) 
autoincrementedKeyAttribute : $entity.autoincrementedKeyAttribute
#else
No autoincrementedKeyAttribute
#end


//--------------------------------------------------------------------

## IF COMPOSITE PRIMARY KEY : GENERATE A JAVA CLASS FOR THIS COMPOSITE KEY
#if ( $entity.hasCompositePrimaryKey() )
// This Bean has a composite Primary Key  
$generator.generate($target.entityName ,  "${entity.name}Key.java", $target.folder, "jpa_bean_pk.vm"  )
#else 
// This Bean has a basic Primary Key (not composite) 
#end
##--- @Transient usage count ( number of xxxToMany links ) 
#set ( $TRANSIENT_COUNT = 0 )

## #set ( $entityLinks = $entity.selectedLinks )
#set ( $entityLinks = $entity.links )

## #foreach( $link in $entity.selectedLinks )
#foreach( $link in $entityLinks )
#if ( $link.isCardinalityManyToMany() || $link.isCardinalityOneToMany() )
#set ( $TRANSIENT_COUNT = $TRANSIENT_COUNT + 1 )
#end
#end

package ${target.javaPackageFromFolder($SRC)};

import java.io.Serializable;

//import javax.validation.constraints.* ;
//import org.hibernate.validator.constraints.* ;

#foreach( $import in $java.imports($entity) )
import $import;
#end

#foreach( $import in $jpa.imports($entity) )
import $import;
#end

/**
 * Persistent class for entity stored in table "${entity.databaseTable}"
 *
 * @author Telosys Tools Generator
 *
 */

$jpa.entityAnnotations(0, $entity)
// Define named queries here
@NamedQueries ( {
  @NamedQuery ( name="${entity.name}.countAll", query="SELECT COUNT(x) FROM ${entity.name} x" )
} )
public class ${entity.name} implements Serializable {

    private static final long serialVersionUID = 1L;

#if ( $entity.hasCompositePrimaryKey() )
    //----------------------------------------------------------------------
    // ENTITY PRIMARY KEY ( EMBEDDED IN AN EXTERNAL CLASS )  
    //----------------------------------------------------------------------
	@EmbeddedId
    private ${entity.name}Key compositePrimaryKey ;

#else 
    //----------------------------------------------------------------------
    // ENTITY PRIMARY KEY ( BASED ON A SINGLE FIELD )
    //----------------------------------------------------------------------
#foreach( $field in $entity.keyAttributes )
## $jpa.fieldAnnotations(4, $field)
    private $field.formattedType(10) $field.formattedName(12) #if($field.hasInitialValue())= ${field.initialValue} #end;
#end

#end

    //----------------------------------------------------------------------
    // ENTITY DATA FIELDS 
    //----------------------------------------------------------------------    
#foreach( $field in $dataFields )
## #if ( $field.isUsedInLinkJoinColumn( $entity.selectedLinks ) != true )
## $field.jpaAnnotations(4)
##     private $field.formattedType(10) $field.formattedName(12) #if($field.hasInitialValue())= ${field.initialValue} #end;
##     
## #else
##     // "$field.name" (column "$field.databaseName") is not mapped as an attribute because it is used in a link   
##     
## #end
$jpa.fieldAnnotations(4, $field)
    private $field.formattedType(10) $field.formattedName(12) #if($field.hasInitialValue())= ${field.initialValue} #end;

#end
#foreach( $field in $linkFields )
	// "$field.name" (column "$field.databaseName") is not defined by itself because used as FK in a link 
#end

//----------------------------------------------------------------------
// ATTRIBUTES
//----------------------------------------------------------------------
This entity has $entity.attributesCount attribute(s) :
#foreach( $attribute in $entity.attributes )
//--------
attribute.name = "$attribute.name"
attribute.formattedName(20) = "$attribute.formattedName(20)"

attribute.type = "$attribute.type"
attribute.formattedType(20) = "$attribute.formattedType(20)"
attribute.fullType = "$attribute.fullType"
attribute.wrapperType = "$attribute.wrapperType"

attribute.isKeyElement = $attribute.isKeyElement()

attribute.getter = "$attribute.getter"
attribute.setter = "$attribute.setter"

attribute.dateType = $attribute.dateType 
attribute.defaultValue = "$attribute.defaultValue"

attribute.hasDefaultValue() = $attribute.hasDefaultValue()
attribute.hasInitialValue() = $attribute.hasInitialValue()
attribute.hasDatabaseDefaultValue() = $attribute.hasDatabaseDefaultValue()
## TODO ? hasDatabaseComment() 

attribute.databaseName = "$attribute.databaseName"
attribute.databaseSize = $attribute.databaseSize
attribute.databaseComment = "$attribute.databaseComment"
attribute.databaseDefaultValue = "$attribute.databaseDefaultValue"
attribute.databaseType = "$attribute.databaseType"
## New in ver 3.4.0
## attribute.databaseTypeWithSize = "$attribute.databaseTypeWithSize"
attribute.sqlColumnName        = "$attribute.sqlColumnName"
attribute.sqlColumnType        = "$attribute.sqlColumnType"
attribute.sqlColumnConstraints = "$attribute.sqlColumnConstraints"
   
//--------
#end 

//----------------------------------------------------------------------
// ENTITY LINKS ( RELATIONSHIP )
//----------------------------------------------------------------------
## #foreach( $link in $entity.links )
## #foreach( $link in $entity.selectedLinks )

#foreach( $link in $entityLinks )
## $jpa.linkAnnotations(4, $link, $allMappedFields)
cardinality            = "$link.cardinality"

//--- Field
fieldName              = "$link.fieldName"
formattedFieldName(12) = "$link.formattedFieldName(12)"
fieldType              = "$link.fieldType"  
formattedFieldType(0)  = "$link.formattedFieldType(0)" 
formattedFieldType(20) = "$link.formattedFieldType(20)" 
## REMOVE in v 3.3.0  :  fieldSimpleType        = "$link.fieldSimpleType" 
## REMOVE in v 3.3.0  :  fieldFullType          = "$link.fieldFullType"

//--- Target entity 
targetEntity.name      = "$link.targetEntity.name"
targetEntityFullType   = "$link.targetEntityFullType"
targetEntitySimpleType = "$link.targetEntitySimpleType"

//--- Setter and getter
setter  = $link.setter
getter  = $link.getter

attributesCount        = $link.attributesCount
cascade                = "$link.cascade" 
fetch                  = "$link.fetch"

hasAttributeInPrimaryKey : $link.hasAttributeInPrimaryKey()

hasJoinEntity  : $link.hasJoinEntity()
#if ( $link.hasJoinEntity() )
## joinTable : $link.joinTable
## replaced by joinEntityName in v 3.4.0
## joinTableName = "$link.joinTableName"
joinEntityName = "$link.joinEntityName"
#end

## removed in v 3.4.0
## hasJoinColumns   : $link.hasJoinColumns()
## joinColumns size : $link.joinColumns.size() 


isCardinalityManyToMany : $link.isCardinalityManyToMany()
isCardinalityManyToOne  : $link.isCardinalityManyToOne()
isCardinalityOneToMany  : $link.isCardinalityOneToMany()
isCardinalityOneToOne   : $link.isCardinalityOneToOne()

isCascadeALL      : $link.isCascadeALL()
isCascadeMERGE    : $link.isCascadeMERGE()
isCascadePERSIST  : $link.isCascadePERSIST()
isCascadeREFRESH  : $link.isCascadeREFRESH()
isCascadeREMOVE   : $link.isCascadeREMOVE()

isFetchDEFAULT : $link.isFetchDEFAULT()
isFetchEAGER   : $link.isFetchEAGER()
isFetchLAZY    : $link.isFetchLAZY()

isOwningSide : $link.isOwningSide()
#if ( $link.isOwningSide() == false ) 
mappedBy : $link.mappedBy
#else
No "mappedBy" (not owning side)
#end

optional = $link.optional


attributes ( size = $link.attributes.size() ) : 
#foreach( $a in  $link.attributes ) 
attribute : $a
#end

//-----

#end

    //----------------------------------------------------------------------
    // CONSTRUCTOR(S)
    //----------------------------------------------------------------------
    public ${entity.name}() {
		super();
#if ( $entity.hasCompositePrimaryKey() )        
		this.compositePrimaryKey = new ${entity.name}Key();       
#end
    }
    
#if ( $entity.hasCompositePrimaryKey() )
    //----------------------------------------------------------------------
    // GETTER & SETTER FOR THE COMPOSITE KEY 
    //----------------------------------------------------------------------
##	public ${entity.name}Key getKey() {
##        return key;
##    }
## 
##    public void setKey(${entity.name}Key key) {
##        this.key = key;
##    }
##
#foreach( $field in $entity.keyAttributes )
#if ( $field.setter )    public void ${field.setter}( $field.type $field.name ) {
        this.compositePrimaryKey.${field.setter}( $field.name ) ;
    }
#end
#if ( $field.getter )    public $field.type ${field.getter}() {
        return this.compositePrimaryKey.${field.getter}() ;
    }
#end
#end

#else 
    //----------------------------------------------------------------------
    // GETTER & SETTER FOR THE KEY FIELD
    //----------------------------------------------------------------------
#foreach( $field in $entity.keyAttributes )
#if ( $field.setter )    public void ${field.setter}( $field.type $field.name ) {
        this.$field.name = $field.name ;
    }
#end
#if ( $field.getter )    public $field.type ${field.getter}() {
        return this.$field.name;
    }
#end
#end
#end

    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR FIELDS
    //----------------------------------------------------------------------
#foreach( $field in $dataFields )
## #if ( $field.isUsedInLinkJoinColumn( $entity.selectedLinks ) != true )
#if ( $field.databaseName )    //--- DATABASE MAPPING : $field.databaseName ( $field.databaseType ) 
#end
#if ( $field.setter )    public void ${field.setter}( $field.type $field.name ) {
        this.$field.name = $field.name;
    }
#end
#if ( $field.getter )    public $field.type ${field.getter}() {
        return this.$field.name;
    }
#end

## #end  
#end  

    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR LINKS
    //----------------------------------------------------------------------
## #foreach( $link in $entity.links )
#foreach( $link in $entity.selectedLinks )
#if ( $link.setter )    public void ${link.setter}( ${link.formattedFieldType(0)} ${link.formattedFieldName(0)} ) {
        this.${link.formattedFieldName(0)} = ${link.formattedFieldName(0)};
    }
#end
#if ( $link.getter )    public ${link.formattedFieldType(0)} ${link.getter}() {
        return this.${link.formattedFieldName(0)};
    }
#end

#end  

    //----------------------------------------------------------------------
    // toString METHOD
    //----------------------------------------------------------------------
## TEST ALL SIGNATURES FOR 'toStringMethod'
$java.toStringMethod($entity, 4)
$java.toStringMethod($entity, 4, '   ')
$java.toStringMethod($entity, $entity.keyAttributes, 4 )
$java.toStringMethod($entity, $entity.nonKeyAttributes , 4, '   ')
}
